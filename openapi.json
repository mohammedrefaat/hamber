{
  "api_info": {
    "title": "Hamber API Documentation",
    "version": "0.0.1",
    "base_url": "http://localhost:8080/api",
    "description": "Complete API documentation for the Hamber application with authentication, blog management, and user management features."
  },
  "authentication": {
    "type": "Bearer Token",
    "header": "Authorization: Bearer <token>",
    "description": "Most endpoints require JWT authentication. Include the token in the Authorization header."
  },
  "endpoints": {
    "public": {
      "health_check": {
        "method": "GET",
        "path": "/api/ping",
        "description": "Health check endpoint",
        "auth_required": false,
        "request": {},
        "response": {
          "200": {
            "message": "pong"
          }
        }
      },
      "packages": {
        "get_all_packages": {
          "method": "GET",
          "path": "/api/packages",
          "description": "Get all active packages",
          "auth_required": false,
          "request": {},
          "response": {
            "200": {
              "packages": [
                {
                  "id": 1,
                  "name": "Basic Plan",
                  "price": 29.99,
                  "duration": 30,
                  "benefits": "[\"Feature 1\", \"Feature 2\"]",
                  "description": "Basic package description",
                  "is_active": true,
                  "created_at": "2024-01-01T00:00:00Z",
                  "updated_at": "2024-01-01T00:00:00Z",
                  "price_per_client": false
                }
              ]
            }
          }
        },
        "get_package": {
          "method": "GET",
          "path": "/api/packages/{id}",
          "description": "Get specific package by ID",
          "auth_required": false,
          "parameters": {
            "path": {
              "id": {
                "type": "integer",
                "required": true,
                "description": "Package ID"
              }
            }
          },
          "response": {
            "200": {
              "package": {
                "id": 1,
                "name": "Basic Plan",
                "price": 29.99,
                "duration": 30,
                "benefits": "[\"Feature 1\", \"Feature 2\"]",
                "description": "Basic package description",
                "is_active": true,
                "created_at": "2024-01-01T00:00:00Z",
                "updated_at": "2024-01-01T00:00:00Z",
                "price_per_client": false
              }
            },
            "404": {
              "error": "Package not found"
            }
          }
        }
      },
      "authentication": {
        "login": {
          "method": "POST",
          "path": "/api/auth/login",
          "description": "User login",
          "auth_required": false,
          "request": {
            "body": {
              "email": {
                "type": "string",
                "required": true,
                "validation": "valid email format"
              },
              "password": {
                "type": "string",
                "required": true,
                "validation": "minimum 6 characters"
              }
            },
            "example": {
              "email": "user@example.com",
              "password": "password123"
            }
          },
          "response": {
            "200": {
              "access_token": "jwt_access_token",
              "refresh_token": "jwt_refresh_token",
              "user": {
                "ID": 1,
                "Name": "John Doe",
                "Email": "user@example.com",
                "Subdomain": "johndoe",
                "PackageID": 1,
                "IS_ACTIVE": true,
                "IS_EMAIL_VERIFIED": false,
                "CreatedAt": "2024-01-01T00:00:00Z"
              }
            },
            "401": {
              "error": "invalid email or password"
            }
          }
        },
        "register": {
          "method": "POST",
          "path": "/api/auth/register",
          "description": "User registration",
          "auth_required": false,
          "request": {
            "body": {
              "email": {
                "type": "string",
                "required": true,
                "validation": "valid email format"
              },
              "password": {
                "type": "string",
                "required": true,
                "validation": "minimum 6 characters"
              },
              "name": {
                "type": "string",
                "required": true
              },
              "subdomain": {
                "type": "string",
                "required": true
              },
              "package_id": {
                "type": "integer",
                "required": true
              }
            },
            "example": {
              "email": "newuser@example.com",
              "password": "password123",
              "name": "Jane Doe",
              "subdomain": "janedoe",
              "package_id": 1
            }
          },
          "response": {
            "201": {
              "access_token": "jwt_access_token",
              "refresh_token": "jwt_refresh_token",
              "user": {
                "ID": 2,
                "Name": "Jane Doe",
                "Email": "newuser@example.com",
                "Subdomain": "janedoe",
                "PackageID": 1,
                "IS_ACTIVE": true
              }
            },
            "409": {
              "error": "email already exists"
            },
            "400": {
              "error": "validation error message"
            }
          }
        },
        "refresh_token": {
          "method": "POST",
          "path": "/api/auth/refresh",
          "description": "Refresh access token",
          "auth_required": false,
          "request": {
            "body": {
              "refresh_token": {
                "type": "string",
                "required": true
              }
            },
            "example": {
              "refresh_token": "jwt_refresh_token"
            }
          },
          "response": {
            "200": {
              "access_token": "new_jwt_access_token",
              "refresh_token": "new_jwt_refresh_token"
            },
            "401": {
              "error": "Invalid refresh token"
            }
          }
        },
        "forgot_password": {
          "method": "POST",
          "path": "/api/auth/forgot-password",
          "description": "Send password reset code",
          "auth_required": false,
          "request": {
            "body": {
              "email": {
                "type": "string",
                "required": true,
                "validation": "valid email format"
              }
            },
            "example": {
              "email": "user@example.com"
            }
          },
          "response": {
            "200": {
              "message": "Password reset code sent to your email"
            },
            "404": {
              "error": "Email not found"
            }
          }
        },
        "reset_password": {
          "method": "POST",
          "path": "/api/auth/reset-password",
          "description": "Reset password with code",
          "auth_required": false,
          "request": {
            "body": {
              "email": {
                "type": "string",
                "required": true,
                "validation": "valid email format"
              },
              "code": {
                "type": "string",
                "required": true
              },
              "new_password": {
                "type": "string",
                "required": true,
                "validation": "minimum 6 characters"
              }
            },
            "example": {
              "email": "user@example.com",
              "code": "123456",
              "new_password": "newpassword123"
            }
          },
          "response": {
            "200": {
              "message": "Password reset successfully"
            },
            "400": {
              "error": "Invalid or expired reset code"
            }
          }
        }
      },
      "email_verification": {
        "send_email_verification": {
          "method": "POST",
          "path": "/api/verify/send-email",
          "description": "Send email verification code",
          "auth_required": false,
          "request": {
            "body": {
              "email": {
                "type": "string",
                "required": true,
                "validation": "valid email format"
              }
            },
            "example": {
              "email": "user@example.com"
            }
          },
          "response": {
            "200": {
              "message": "Verification code sent to your email",
              "user_id": 1
            },
            "404": {
              "error": "Email not found"
            }
          }
        },
        "verify_email": {
          "method": "POST",
          "path": "/api/verify/email",
          "description": "Verify email with code",
          "auth_required": false,
          "request": {
            "body": {
              "email": {
                "type": "string",
                "required": true,
                "validation": "valid email format"
              },
              "code": {
                "type": "string",
                "required": true
              }
            },
            "example": {
              "email": "user@example.com",
              "code": "123456"
            }
          },
          "response": {
            "200": {
              "message": "Email verified successfully"
            },
            "400": {
              "error": "Invalid or expired verification code"
            }
          }
        }
      },
      "blogs_public": {
        "get_blogs": {
          "method": "GET",
          "path": "/api/blogs",
          "description": "Get published blogs (public)",
          "auth_required": false,
          "parameters": {
            "query": {
              "page": {
                "type": "integer",
                "required": false,
                "default": 1,
                "description": "Page number"
              },
              "limit": {
                "type": "integer",
                "required": false,
                "default": 10,
                "description": "Items per page (max 100)"
              },
              "published": {
                "type": "boolean",
                "required": false,
                "default": false,
                "description": "Filter by published status"
              }
            }
          },
          "response": {
            "200": {
              "blogs": [
                {
                  "id": 1,
                  "title": "Blog Title",
                  "content": "Blog content...",
                  "summary": "Blog summary",
                  "slug": "blog-title",
                  "author_id": 1,
                  "author": {
                    "ID": 1,
                    "Name": "Author Name",
                    "Email": "author@example.com"
                  },
                  "photos": "[\"photo1.webp\", \"photo2.webp\"]",
                  "is_published": true,
                  "published_at": "2024-01-01T00:00:00Z",
                  "created_at": "2024-01-01T00:00:00Z",
                  "updated_at": "2024-01-01T00:00:00Z"
                }
              ],
              "total": 50,
              "page": 1,
              "limit": 10
            }
          }
        },
        "get_blog": {
          "method": "GET",
          "path": "/api/blogs/{id}",
          "description": "Get specific blog by ID (public)",
          "auth_required": false,
          "parameters": {
            "path": {
              "id": {
                "type": "integer",
                "required": true,
                "description": "Blog ID"
              }
            }
          },
          "response": {
            "200": {
              "blog": {
                "id": 1,
                "title": "Blog Title",
                "content": "Full blog content...",
                "summary": "Blog summary",
                "slug": "blog-title",
                "author_id": 1,
                "author": {
                  "ID": 1,
                  "Name": "Author Name",
                  "Email": "author@example.com"
                },
                "photos": "[\"photo1.webp\", \"photo2.webp\"]",
                "is_published": true,
                "published_at": "2024-01-01T00:00:00Z",
                "created_at": "2024-01-01T00:00:00Z",
                "updated_at": "2024-01-01T00:00:00Z"
              }
            },
            "404": {
              "error": "Blog not found"
            }
          }
        }
      }
    },
    "protected": {
      "user_profile": {
        "get_profile": {
          "method": "GET",
          "path": "/api/profile",
          "description": "Get current user profile",
          "auth_required": true,
          "response": {
            "200": {
              "ID": 1,
              "Name": "John Doe",
              "Email": "user@example.com",
              "Subdomain": "johndoe",
              "PackageID": 1,
              "IS_ACTIVE": true,
              "IS_EMAIL_VERIFIED": false,
              "CreatedAt": "2024-01-01T00:00:00Z",
              "UpdatedAt": "2024-01-01T00:00:00Z"
            },
            "401": {
              "error": "Unauthorized"
            },
            "404": {
              "error": "User not found"
            }
          }
        },
        "update_profile": {
          "method": "PUT",
          "path": "/api/profile",
          "description": "Update current user profile",
          "auth_required": true,
          "request": {
            "body": {
              "name": {
                "type": "string",
                "required": false
              }
            },
            "example": {
              "name": "Updated Name"
            }
          },
          "response": {
            "200": {
              "ID": 1,
              "Name": "Updated Name",
              "Email": "user@example.com",
              "Subdomain": "johndoe",
              "PackageID": 1,
              "IS_ACTIVE": true,
              "IS_EMAIL_VERIFIED": false,
              "CreatedAt": "2024-01-01T00:00:00Z",
              "UpdatedAt": "2024-01-01T00:00:00Z"
            },
            "401": {
              "error": "Unauthorized"
            },
            "400": {
              "error": "Validation error"
            }
          }
        }
      },
      "blogs_protected": {
        "create_blog": {
          "method": "POST",
          "path": "/api/blogs",
          "description": "Create new blog post",
          "auth_required": true,
          "request": {
            "body": {
              "title": {
                "type": "string",
                "required": true
              },
              "content": {
                "type": "string",
                "required": true
              },
              "summary": {
                "type": "string",
                "required": false
              },
              "slug": {
                "type": "string",
                "required": true
              },
              "is_published": {
                "type": "boolean",
                "required": false,
                "default": false
              }
            },
            "example": {
              "title": "My New Blog Post",
              "content": "This is the content of my blog post...",
              "summary": "A brief summary",
              "slug": "my-new-blog-post",
              "is_published": true
            }
          },
          "response": {
            "201": {
              "blog": {
                "id": 1,
                "title": "My New Blog Post",
                "content": "This is the content of my blog post...",
                "summary": "A brief summary",
                "slug": "my-new-blog-post",
                "author_id": 1,
                "photos": "[]",
                "is_published": true,
                "published_at": "2024-01-01T00:00:00Z",
                "created_at": "2024-01-01T00:00:00Z",
                "updated_at": "2024-01-01T00:00:00Z"
              }
            },
            "401": {
              "error": "User not authenticated"
            },
            "409": {
              "error": "Blog with this slug already exists"
            },
            "400": {
              "error": "Validation error"
            }
          }
        },
        "update_blog": {
          "method": "PUT",
          "path": "/api/blogs/{id}",
          "description": "Update existing blog post",
          "auth_required": true,
          "parameters": {
            "path": {
              "id": {
                "type": "integer",
                "required": true,
                "description": "Blog ID"
              }
            }
          },
          "request": {
            "body": {
              "title": {
                "type": "string",
                "required": false
              },
              "content": {
                "type": "string",
                "required": false
              },
              "summary": {
                "type": "string",
                "required": false
              },
              "slug": {
                "type": "string",
                "required": false
              },
              "is_published": {
                "type": "boolean",
                "required": false
              }
            },
            "example": {
              "title": "Updated Blog Title",
              "is_published": true
            }
          },
          "response": {
            "200": {
              "blog": {
                "id": 1,
                "title": "Updated Blog Title",
                "content": "Blog content...",
                "summary": "Blog summary",
                "slug": "updated-blog-title",
                "author_id": 1,
                "photos": "[]",
                "is_published": true,
                "published_at": "2024-01-01T00:00:00Z",
                "created_at": "2024-01-01T00:00:00Z",
                "updated_at": "2024-01-01T00:00:00Z"
              }
            },
            "401": {
              "error": "User not authenticated"
            },
            "403": {
              "error": "You can only edit your own blog posts"
            },
            "404": {
              "error": "Blog not found"
            }
          }
        },
        "delete_blog": {
          "method": "DELETE",
          "path": "/api/blogs/{id}",
          "description": "Delete blog post",
          "auth_required": true,
          "parameters": {
            "path": {
              "id": {
                "type": "integer",
                "required": true,
                "description": "Blog ID"
              }
            }
          },
          "response": {
            "200": {
              "message": "Blog post deleted successfully"
            },
            "401": {
              "error": "User not authenticated"
            },
            "403": {
              "error": "You can only delete your own blog posts"
            },
            "404": {
              "error": "Blog not found"
            }
          }
        },
        "upload_blog_photo": {
          "method": "POST",
          "path": "/api/blogs/{id}/photos",
          "description": "Upload photos for blog post",
          "auth_required": true,
          "parameters": {
            "path": {
              "id": {
                "type": "integer",
                "required": true,
                "description": "Blog ID"
              }
            }
          },
          "request": {
            "content_type": "multipart/form-data",
            "body": {
              "photos": {
                "type": "file[]",
                "required": true,
                "description": "Image files (JPG, PNG, WebP)",
                "max_size": "10MB per file"
              }
            }
          },
          "response": {
            "200": {
              "message": "Photos uploaded successfully",
              "uploaded_photos": [
                "/uploads/blogs/blog_1_1640995200_photo1.webp",
                "/uploads/blogs/blog_1_1640995201_photo2.webp"
              ],
              "total_photos": 2
            },
            "401": {
              "error": "User not authenticated"
            },
            "403": {
              "error": "You can only upload photos to your own blog posts"
            },
            "404": {
              "error": "Blog not found"
            },
            "400": {
              "error": "No photos uploaded / Invalid file type"
            }
          }
        }
      }
    },
    "admin_only": {
      "user_management": {
        "get_all_users": {
          "method": "GET",
          "path": "/api/admin/users",
          "description": "Get all users (admin only)",
          "auth_required": true,
          "role_required": "admin",
          "response": {
            "501": {
              "error": "Not implemented yet"
            }
          }
        },
        "delete_user": {
          "method": "DELETE",
          "path": "/api/admin/users/{id}",
          "description": "Delete user (admin only)",
          "auth_required": true,
          "role_required": "admin",
          "parameters": {
            "path": {
              "id": {
                "type": "integer",
                "required": true,
                "description": "User ID"
              }
            }
          },
          "response": {
            "200": {
              "message": "User deleted successfully"
            },
            "401": {
              "error": "Unauthorized"
            },
            "403": {
              "error": "Insufficient permissions"
            },
            "400": {
              "error": "Invalid user ID"
            }
          }
        }
      },
      "blog_management": {
        "get_all_blogs_admin": {
          "method": "GET",
          "path": "/api/admin/blogs",
          "description": "Get all blogs including unpublished (admin only)",
          "auth_required": true,
          "role_required": "admin",
          "parameters": {
            "query": {
              "page": {
                "type": "integer",
                "required": false,
                "default": 1
              },
              "limit": {
                "type": "integer",
                "required": false,
                "default": 10
              },
              "author_id": {
                "type": "integer",
                "required": false,
                "description": "Filter by author ID"
              }
            }
          },
          "response": {
            "200": {
              "blogs": [
                {
                  "id": 1,
                  "title": "Blog Title",
                  "content": "Blog content...",
                  "summary": "Blog summary",
                  "slug": "blog-title",
                  "author_id": 1,
                  "author": {
                    "ID": 1,
                    "Name": "Author Name",
                    "Email": "author@example.com"
                  },
                  "photos": "[\"photo1.webp\"]",
                  "is_published": false,
                  "published_at": null,
                  "created_at": "2024-01-01T00:00:00Z",
                  "updated_at": "2024-01-01T00:00:00Z"
                }
              ],
              "total": 25,
              "page": 1,
              "limit": 10
            },
            "401": {
              "error": "Unauthorized"
            },
            "403": {
              "error": "Insufficient permissions"
            }
          }
        },
        "get_blog_analytics": {
          "method": "GET",
          "path": "/api/admin/blogs/analytics",
          "description": "Get blog analytics (admin only)",
          "auth_required": true,
          "role_required": "admin",
          "response": {
            "200": {
              "analytics": {
                "total_blogs": 150,
                "published_blogs": 120,
                "unpublished_blogs": 30,
                "total_authors": 25,
                "blogs_this_month": 15,
                "blogs_this_week": 4
              }
            },
            "401": {
              "error": "Unauthorized"
            },
            "403": {
              "error": "Insufficient permissions"
            }
          }
        }
      }
    }
  },
  "error_codes": {
    "200": "Success",
    "201": "Created",
    "400": "Bad Request - Invalid input or validation error",
    "401": "Unauthorized - Authentication required or invalid credentials",
    "403": "Forbidden - Insufficient permissions",
    "404": "Not Found - Resource not found",
    "409": "Conflict - Resource already exists",
    "500": "Internal Server Error",
    "501": "Not Implemented"
  },
  "common_headers": {
    "request": {
      "Content-Type": "application/json",
      "Authorization": "Bearer <jwt_token>",
      "Accept-Language": "en"
    },
    "response": {
      "Content-Type": "application/json",
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "POST, GET, OPTIONS, PUT, DELETE",
      "Access-Control-Allow-Headers": "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With"
    }
  },
  "data_models": {
    "User": {
      "ID": "integer",
      "Name": "string",
      "Email": "string (unique)",
      "Subdomain": "string (unique)",
      "RoleID": "integer",
      "PackageID": "integer",
      "CreatedAt": "datetime",
      "UpdatedAt": "datetime",
      "IS_ACTIVE": "boolean",
      "IS_EMAIL_VERIFIED": "boolean",
      "IS_MOBILE_VERIFIED": "boolean",
      "Phone": "string (optional)",
      "Avatar": "string (optional)",
      "Bio": "text (optional)",
      "Website": "string (optional)",
      "Location": "string (optional)"
    },
    "Blog": {
      "id": "integer",
      "title": "string",
      "content": "text",
      "summary": "text (optional)",
      "slug": "string (unique)",
      "author_id": "integer",
      "author": "User object",
      "photos": "JSON string array",
      "is_published": "boolean",
      "published_at": "datetime (nullable)",
      "created_at": "datetime",
      "updated_at": "datetime"
    },
    "Package": {
      "id": "integer",
      "name": "string",
      "price": "float",
      "duration": "integer (days)",
      "benefits": "JSON string array",
      "description": "text",
      "is_active": "boolean",
      "created_at": "datetime",
      "updated_at": "datetime",
      "price_per_client": "boolean"
    }
  },
  "middleware_notes": {
    "CORS": "All endpoints support CORS with permissive settings",
    "Language": "Accepts Accept-Language header for internationalization",
    "JWT": "Protected endpoints require valid JWT token in Authorization header",
    "Rate_Limiting": "Rate limiting is configured but implementation details not shown in provided code"
  },
  "file_upload_notes": {
    "supported_formats": ["JPG", "JPEG", "PNG", "WebP", "GIF"],
    "max_file_size": "10MB per file",
    "conversion": "Images are converted to WebP format for optimization",
    "storage": "Files are processed and stored with timestamp-based naming"
  }
}