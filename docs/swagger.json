{
    "swagger": "2.0",
    "info": {
        "description": "This is the API documentation for the Hamber platform",
        "title": "Hamber API Documentation",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.hamber-hub.com/support",
            "email": "support@hamber-hub.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "test.hamber-hub.com",
    "basePath": "/api",
    "paths": {
        "/addons": {
            "get": {
                "description": "Get paginated list of available add-ons",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Add-ons"
                ],
                "summary": "Get add-ons list",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Add-ons list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Download receipt as PDF file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf"
                ],
                "tags": [
                    "Receipts"
                ],
                "summary": "Download receipt PDF",
                "responses": {
                    "200": {
                        "description": "PDF file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Receipt not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Get a new access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New tokens generated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user account with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Email or username already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/blogs": {
            "get": {
                "description": "Get paginated list of published blogs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blogs"
                ],
                "summary": "Get blogs list",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blogs list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new blog post with photos",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blogs"
                ],
                "summary": "Create a new blog post",
                "parameters": [
                    {
                        "description": "Blog details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateBlogRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Blog created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Slug already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/calendar/events": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get calendar events for a specific month",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Calendar"
                ],
                "summary": "Get user events",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 2025,
                        "description": "Year",
                        "name": "year",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Month (1-12)",
                        "name": "month",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Include public events",
                        "name": "include_public",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Events list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get paginated list of user notifications",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get user notifications",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Show only unread",
                        "name": "unread_only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notifications list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/notifications/unread-count": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get count of unread notifications for current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get unread notifications count",
                "responses": {
                    "200": {
                        "description": "Unread count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/notifications/{id}/read": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Mark a specific notification as read",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Mark notification as read",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification marked as read",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Notification not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get paginated list of user orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get orders list",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Orders list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new order for products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get details of a specific order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get order by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/orders/{id}/status": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update the status of an order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Update order status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Status update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status updated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/packages": {
            "get": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of packages",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/packages/{id}": {
            "get": {
                "description": "Get details of a specific package",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packages"
                ],
                "summary": "Get package by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Package details",
                        "schema": {
                            "$ref": "#/definitions/dbmodels.Package"
                        }
                    },
                    "404": {
                        "description": "Package not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/payment/change-package": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Request to upgrade or downgrade package",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Request package change",
                "parameters": [
                    {
                        "description": "Package change request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.ChangePackageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Change request created",
                        "schema": {
                            "$ref": "#/definitions/controllers.ChangePackageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get paginated list of products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get products list",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by category",
                        "name": "category",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated product details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Soft delete a product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Delete product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get current user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "$ref": "#/definitions/dbmodels.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update current user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Profile update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated profile",
                        "schema": {
                            "$ref": "#/definitions/dbmodels.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/receipts/order/{order_id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Generate PDF receipt for an order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Receipts"
                ],
                "summary": "Generate order receipt",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Company info",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Receipt generated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/receipts/order/{order_id}/download": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Download receipt as PDF file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf"
                ],
                "tags": [
                    "Receipts"
                ],
                "summary": "Download receipt PDF",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Receipt not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/subscriptions": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Subscribe to an add-on service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Add-on Subscriptions"
                ],
                "summary": "Subscribe to an add-on",
                "parameters": [
                    {
                        "description": "Subscription details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.SubscribeAddonRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscription created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/todos": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get paginated list of user todos",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todos"
                ],
                "summary": "Get todos list",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by completion status",
                        "name": "completed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Todos list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new todo task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todos"
                ],
                "summary": "Create a new todo",
                "parameters": [
                    {
                        "description": "Todo details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateTodoRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Todo created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.AuthResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/dbmodels.User"
                }
            }
        },
        "controllers.ChangePackageRequest": {
            "type": "object",
            "required": [
                "new_package_id",
                "payment_method"
            ],
            "properties": {
                "new_package_id": {
                    "type": "integer"
                },
                "payment_method": {
                    "type": "string",
                    "enum": [
                        "fawry",
                        "paymob"
                    ]
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "controllers.ChangePackageResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "expires_at": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "package_change_id": {
                    "type": "integer"
                },
                "payment_id": {
                    "type": "integer"
                },
                "payment_url": {
                    "type": "string"
                },
                "reference_number": {
                    "type": "string"
                }
            }
        },
        "controllers.CreateBlogRequest": {
            "type": "object",
            "required": [
                "content",
                "slug",
                "title"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "is_published": {
                    "type": "boolean"
                },
                "slug": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "controllers.CreateOrderRequest": {
            "type": "object",
            "required": [
                "client_id",
                "total"
            ],
            "properties": {
                "client_id": {
                    "type": "integer"
                },
                "total": {
                    "type": "number"
                }
            }
        },
        "controllers.CreateTodoRequest": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "due_date": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "controllers.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "controllers.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "controllers.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "subdomain"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "mobile_no": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "package_id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "subdomain": {
                    "type": "string"
                }
            }
        },
        "controllers.SubscribeAddonRequest": {
            "type": "object",
            "required": [
                "addon_id",
                "payment_method",
                "quantity"
            ],
            "properties": {
                "addon_id": {
                    "type": "integer"
                },
                "payment_method": {
                    "type": "string",
                    "enum": [
                        "fawry",
                        "paymob"
                    ]
                },
                "pricing_tier_id": {
                    "description": "Optional, for discounted pricing",
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "controllers.UpdateProductRequest": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "discount_price": {
                    "type": "number"
                },
                "favorite": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "photos": {
                    "description": "Array of base64 encoded images",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "integer"
                },
                "sku": {
                    "type": "string"
                },
                "tags": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "dbmodels.Package": {
            "type": "object",
            "properties": {
                "benefits": {
                    "description": "JSON string for benefits",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "description": "In days or months",
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "price_per_client": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dbmodels.Permission": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "description": "Permission name (e.g., \"CREATE_ORDER\")",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "dbmodels.Role": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "description": "Role name",
                    "type": "string"
                },
                "permissions": {
                    "description": "Role-Permissions relationship",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dbmodels.Permission"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "dbmodels.User": {
            "type": "object",
            "properties": {
                "ACTIVATION_CODE": {
                    "type": "string"
                },
                "Avatar": {
                    "description": "Profile enhancement",
                    "type": "string"
                },
                "Bio": {
                    "type": "string"
                },
                "COUNT_SEND_ACTIVATION_EMAIL": {
                    "type": "integer"
                },
                "CreatedAt": {
                    "type": "string"
                },
                "DEVICE_TOKEN": {
                    "type": "string"
                },
                "EXPIRESAT": {
                    "type": "string"
                },
                "Email": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "IS_ACTIVE": {
                    "type": "boolean"
                },
                "IS_BLOCKED": {
                    "type": "boolean"
                },
                "IS_EMAIL_VERIFIED": {
                    "type": "boolean"
                },
                "IS_MOBILE_VERIFIED": {
                    "type": "boolean"
                },
                "LAST_LOGIN_IP": {
                    "type": "string"
                },
                "Location": {
                    "type": "string"
                },
                "NID": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "PHONE_CODE_EXPIRES_AT": {
                    "type": "string"
                },
                "PHONE_VERIFICATION_CODE": {
                    "description": "New fields for future phone verification",
                    "type": "string"
                },
                "PHONE_VERIFIED_AT": {
                    "type": "string"
                },
                "Package": {
                    "$ref": "#/definitions/dbmodels.Package"
                },
                "PackageID": {
                    "type": "integer"
                },
                "Password": {
                    "type": "string"
                },
                "Phone": {
                    "description": "Added phone field",
                    "type": "string"
                },
                "RESET_CODE": {
                    "type": "string"
                },
                "Role": {
                    "description": "Many-to-many relationship between users and roles",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dbmodels.Role"
                    }
                },
                "RoleID": {
                    "description": "Foreign key to the Role table",
                    "type": "integer"
                },
                "Subdomain": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "Website": {
                    "type": "string"
                }
            }
        }
    }
}